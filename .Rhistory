dat_m = bind_rows(lapply(names(provider_summary), function(key) {
return(provider_summary[[key]] %>% mutate(PROVIDER_KEY = key))
}))
return(dat_m %>% mutate(Measure = measureNames[m]))
})) %>% mutate(Measure = factor(Measure, levels = measureNames))
if(str_trim(info$SPECIALTY_DESC) != "") {
# data frame within the same specialty as the provider
# when specialty is an empty string, use all providers instead
spec_meas = spec_meas %>%
inner_join(provider_info, by = c("PROVIDER_KEY" = "PROVIDER_ORDER_MD_KEY")) %>%
filter(SPECIALTY_DESC == info$SPECIALTY_DESC)
}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr); library(ggplot2); library(plotly); library(htmltools)
library(RcppTOML); library(stringr); library(knitr); library(DT)
library(lubridate); library(tidyr)
mask_name = TRUE
key = "1956236"
# set a threshold to filter providers with at least some eligible patients
elig_thres = 5
path2funcs = '~/MPrOVE/Rscripts/ReportCard'
source(sprintf('%s/rateCI.R',path2funcs))
## Measures
path2data = '/Volumes/Shared2/OCA_Admin/ACR-Select/pacpr/'
setwd(path2data)
provider_info = read.csv('PROVIDER_ORDER_MD.tsv',sep='\t',colClasses = "character")
info = filter(provider_info, PROVIDER_ORDER_MD_KEY == key)
if(mask_name) info$FULL_NAME = 'Last, First M.'
measures = c('BackPain','HeadSyncope','CTofSinuses','UncompHeadache')
folder_date = c('20June2017','16June2017','20June2017','16June2017')
names(folder_date) = measures
## load provider summary
for(m in measures){
foo = load(sprintf('%s%s/%s/%s_summary.RData',path2data,m,folder_date[m],m))
for(bar in foo){
assign(paste0(bar,'_',m),get(bar))
}
}
## load provider detailed
for(m in measures){
foo = load(sprintf('%s%s/%s/dfProvider.RData',path2data,m,folder_date[m]))
assign(paste0("df_provider",'_',m),get(foo))
}
## load original imaging files and patients data to extract imaging dates
for(m in measures){
foo = load(sprintf('%s%s/%s/dataFromtsv.RData',path2data,m,folder_date[m],m))
for(bar in foo){
if(str_sub(bar, end = 3) == "img") assign(paste0(bar,'_',m),get(bar))
rm(list = bar)
}
}
for(m in measures){
foo = load(sprintf('%s%s/%s/dfPatients.RData',path2data,m,folder_date[m]))
assign(paste0("df_patients",'_',m),get(foo))
}
measureNames = c('Low Back Pain','Syncope','Acute Sinusitis','Uncomplicated Headache')
names(measureNames) = measures
# dfMeasures = bind_rows(lapply(measures,function(m) {
#   tmp = get(paste0('provider_summary_',m))[[key]]
#   if(is.null(tmp)) tmp = data.frame(Year = numeric(0), Num = numeric(0),
#                                      Den = numeric(0), Rate = numeric(0))
#   tmp %>% mutate(Measure = measureNames[m])
# }))
# provider summary with all years, all measures
prov_meas = bind_rows(lapply(measures, function(m) {
tmp = get(paste0("provider_summary_", m))[[key]]
if(is.null(tmp)) tmp = data.frame(Year = 2014:2017, Num = 0, Den = 0, Rate = 0)
# in case the some years has no records
tmp = tmp %>% right_join(data.frame(Year = 2014:2017), by = "Year") %>%
replace_na(list(Num = 0, Den = 0, Rate = 0))
return(tmp %>% mutate(Measure = measureNames[m]))
})) %>% mutate(Measure = factor(Measure, levels = measureNames))
sys_meas = bind_rows(lapply(measures, function(m) {
tmp = get(paste0("system_summary_", m))[[1]]
return(tmp %>% mutate(Measure = measureNames[m]))
})) %>% mutate(Measure = factor(Measure, levels = measureNames))
# create a data.frame from all years, all measures, all providers
spec_meas = bind_rows(lapply(measures, function(m) {
provider_summary = get(paste0("provider_summary_", m))
dat_m = bind_rows(lapply(names(provider_summary), function(key) {
return(provider_summary[[key]] %>% mutate(PROVIDER_KEY = key))
}))
return(dat_m %>% mutate(Measure = measureNames[m]))
})) %>% mutate(Measure = factor(Measure, levels = measureNames))
if(str_trim(info$SPECIALTY_DESC) != "") {
# data frame within the same specialty as the provider
# when specialty is an empty string, use all providers instead
spec_meas = spec_meas %>%
inner_join(provider_info, by = c("PROVIDER_KEY" = "PROVIDER_ORDER_MD_KEY")) %>%
filter(SPECIALTY_DESC == info$SPECIALTY_DESC)
}
path2toml = '/Users/Carl/MPrOVE/toml/' # path to toml files here
toml_BackPain = parseTOML(paste0(path2toml, "BackPain.toml"))
levels = (prov_meas %>% filter(Year == 2017) %>% arrange(Den))$Measure
mainplot = function(year) {
dfYear = prov_meas %>% filter(Year == year) %>%
mutate(Measure = factor(Measure, levels = levels))
## Want a legend like this
#dfTemp = dfYear %>% mutate(Numerator=Num) %>% gather(Bar,Count,Numerator,Den)
#p =  dfTemp %>%
#  ggplot(aes(x=Measure,y=Count,group=Measure,fill=Bar)) + geom_col() + scale_fill_manual('Count',values=c('darkblue','goldenrod'),labels=c('Eligible','Imaged'))
#p
# But want only a single set of labels and unstacked bars
p =  ggplot(dfYear,aes(x=Measure,y=Den,group=Measure,fill=Bar)) +
geom_col(fill='darkblue') + geom_col(aes(y=Num),fill='goldenrod')
p + ylab('# Patients') + theme(axis.text.x=element_text(angle=0)) +
xlab('') + ggtitle('Rates of Inappropriate Imaging.') +
geom_label(aes(label=sprintf('%3.1f%% (%i)',Rate,Num)),fill='goldenrod')
}
summaryTable = function(year) {
dat.tmp = spec_meas %>% filter(Year == year & Den >= elig_thres)
summary_by_meas = prov_meas %>% filter(Year == year) %>%
mutate(Rank = NA, Total = NA, Percentile = NA) %>%
select(Measure, Num, Den, Rate, Rank, Total, Percentile)
for(i in 1:nrow(summary_by_meas)) {
tmp = dat.tmp %>% filter(Measure == summary_by_meas$Measure[i])
rank = which(tmp$PROVIDER_KEY[order(tmp$Rate, decreasing = TRUE)] == key)
total = nrow(tmp)
summary_by_meas$Rank[i] = ifelse(length(rank) == 0, "N/A", rank)
summary_by_meas$Total[i] = total
summary_by_meas$Percentile[i] = ifelse(length(rank) == 0,
"N/A", sprintf("%d%% (%d/%d)", round(rank/total * 100), rank, total))
}
ref = spec_meas %>% group_by(Measure, Year) %>% summarise(Num = sum(Num), Den = sum(Den)) %>%
filter(Year == year) %>% mutate(Rate = paste0(round(Num / Den * 100, digits = 1), "%")) %>%
rename("Specialty Rate" = Rate) %>% select(-Num, -Den, -Year) %>%
inner_join(filter(sys_meas, Year == year) %>% select(Measure, Rate), by = "Measure") %>%
mutate(Rate = paste0(round(Rate, digits = 1), "%")) %>% rename("System Rate" = Rate)
summary_by_meas = summary_by_meas %>%
rename("Inappropriate Imaging" = Num, "Eligible Patients" = Den) %>%
mutate(Rate = paste0(round(Rate, digits = 1), "%")) %>%
select(-Rank, -Total) %>% rename("Provider Rate" = Rate) %>%
inner_join(ref, by = "Measure")
datatable(summary_by_meas[c(1:4, 6:7, 5)], rownames = FALSE,
options = list(dom = 't', columnDefs = list(list(className = 'dt-right', targets = 0:6))))
}
mainplot(2017)
summaryTable(2017)
mainplot(2016)
summaryTable(2016)
mainplot(2015)
summaryTable(2015)
mainplot(2014)
summaryTable(2014)
addCI = function(df) {
bind_cols(df, rateCI(df))
}
gg.dat = bind_rows(prov_meas %>% mutate(Trend = "Provider") %>% addCI,
sys_meas %>% mutate(Trend = "System") %>% addCI)
if(str_trim(info$SPECIALTY_DESC) != "") {
# when specialty is empty, omit specialty trend
gg.dat = bind_rows(gg.dat, spec_meas %>% group_by(Measure, Year) %>%
summarise(Num = sum(Num), Den = sum(Den)) %>%
mutate(Trend = paste("Specialty:", info$SPECIALTY_DESC),
Rate = Num / Den * 100) %>% addCI)
}
trends_by_meas = function(measure) {
p = gg.dat %>% filter(Measure == measure) %>%
ggplot(aes(x = Year, y = Rate, color = Trend, fill = Trend)) +
geom_line() + geom_ribbon(aes(ymin = Lower, ymax = Upper), size = 0, alpha = 0.25) +
geom_point(aes(text = paste0("Numerator: ", Num, "<br>", "Denominator: ", Den))) +
ylab('Rate per 100 eligible patients') + ggtitle("Annual rates of inappropriate imaging") +
theme(legend.title = element_blank())
ggplotly(p)
}
providerBox = function(year) {
dat.tmp = spec_meas %>% filter(Year == year & Den >= elig_thres) %>%
rename(measure = Measure, rate = Rate)
# get the provider's rates as reference
provider_ref = prov_meas %>% filter(Year == year) %>%
mutate(Rank = NA, Total = NA, Percentile = NA) %>%
select(Measure, Rate, Rank, Total, Percentile)
for(i in 1:nrow(provider_ref)) {
tmp = dat.tmp %>% filter(measure == provider_ref$Measure[i])
rank = which(tmp$PROVIDER_KEY[order(tmp$rate, decreasing = TRUE)] == key)
total = nrow(tmp)
provider_ref$Rank[i] = ifelse(length(rank) == 0, "N/A", rank)
provider_ref$Total[i] = total
provider_ref$Percentile[i] = ifelse(length(rank) == 0,
"N/A", sprintf("%d%% (%d/%d)", round(rank/total * 100), rank, total))
}
p = ggplot(dat.tmp, aes(x = measure, y = rate, color = measure)) +
geom_boxplot(alpha = 0.5) + ylab("Rate per 100 eligible patients") + xlab("Measure") +
ggtitle(paste("Provider rates in specialty:", info$SPECIALTY_DESC, ",", year)) +
theme(legend.position = "none") +
geom_point(data = provider_ref, color = "goldenrod", size = 3,
aes(x = Measure, y = Rate, label = Percentile))
ggplotly(p, tooltip = c("Measure", "Rate", "Percentile"))
# p
}
providerScat = function(measure, year = 2017) {
dat.tmp = filter(spec_meas, Den >= elig_thres & Year == year & Measure == measure)
index = which(dat.tmp$PROVIDER_KEY == key)
# reference lines
Sys.rate = filter(sys_meas, Year == year, Measure == measure)$Rate
Spec.rate = filter(gg.dat, Trend == "Specialty", Year == year, Measure == measure)$Rate
p = dat.tmp %>% ggplot(aes(y=Rate,x=Num)) + geom_point(col="brown2",alpha=0.5) +
geom_point(data = dat.tmp[index, ] %>% rename(num = Num, rate = Rate),
aes(y=rate, x=num), col="goldenrod", size=3)
if(str_trim(info$SPECIALTY_DESC) != "") {
p = p +  geom_hline(aes(yintercept = Sys.rate, color = "System Rate"), linetype = "dashed") +
geom_hline(aes(yintercept = Spec.rate, color = "Specialty Rate"), linetype = "dashed") +
scale_color_manual(values = c("System Rate" = "dodgerblue2",
"Specialty Rate" = "mediumseagreen"))
}
else {
p = p +  geom_hline(aes(yintercept = Sys.rate, color = "System Rate"), linetype = "dashed") +
scale_color_manual(values = c("System Rate" = "dodgerblue2"))
}
p = p + xlab('# of patients imaged') + ylab('Rate per 100 eligible patients') +
ggtitle(paste('Inappropriate imaging for specialty:', info$SPECIALTY_DESC, ",", year)) +
theme(legend.title = element_blank())
ggplotly(p, tooltip = c("Num", "Rate", "Sys.rate", "Spec.rate"))
}
gen_scatter = function(year) {
tabs = lapply(measureNames, function(measure) {
sprintf("\n#### %s\n```{r scatter-%d-%s, results = 'asis'}\nproviderScat('%s', year = %d)\n```",
measure, year, measure, measure, year)
})
paste0(unlist(tabs))
}
addCI = function(df) {
bind_cols(df, rateCI(df))
}
gg.dat = bind_rows(prov_meas %>% mutate(Trend = "Provider") %>% addCI,
sys_meas %>% mutate(Trend = "System") %>% addCI)
if(str_trim(info$SPECIALTY_DESC) != "") {
# when specialty is empty, omit specialty trend
gg.dat = bind_rows(gg.dat, spec_meas %>% group_by(Measure, Year) %>%
summarise(Num = sum(Num), Den = sum(Den)) %>%
mutate(Trend = paste("Specialty:", info$SPECIALTY_DESC),
Rate = Num / Den * 100) %>% addCI)
}
trends_by_meas = function(measure) {
p = gg.dat %>% filter(Measure == measure) %>%
ggplot(aes(x = Year, y = Rate, color = Trend, fill = Trend)) +
geom_line() + geom_ribbon(aes(ymin = Lower, ymax = Upper), size = 0, alpha = 0.25) +
geom_point(aes(text = paste0("Numerator: ", Num, "<br>", "Denominator: ", Den))) +
ylab('Rate per 100 eligible patients') + ggtitle("Annual rates of inappropriate imaging") +
theme(legend.title = element_blank())
ggplotly(p)
}
trends_by_meas(measureNames[1])
trends_by_meas(measureNames[2])
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr); library(ggplot2); library(plotly); library(htmltools)
library(RcppTOML); library(stringr); library(knitr); library(DT)
library(lubridate); library(tidyr)
mask_name = TRUE
key = "1956236"
# set a threshold to filter providers with at least some eligible patients
elig_thres = 5
path2funcs = '~/MPrOVE/Rscripts/ReportCard'
source(sprintf('%s/rateCI.R',path2funcs))
## Measures
path2data = '/Volumes/Shared2/OCA_Admin/ACR-Select/pacpr/'
setwd(path2data)
provider_info = read.csv('PROVIDER_ORDER_MD.tsv',sep='\t',colClasses = "character")
info = filter(provider_info, PROVIDER_ORDER_MD_KEY == key)
if(mask_name) info$FULL_NAME = 'Last, First M.'
measures = c('BackPain','HeadSyncope','CTofSinuses','UncompHeadache')
folder_date = c('20June2017','16June2017','20June2017','16June2017')
names(folder_date) = measures
## load provider summary
for(m in measures){
foo = load(sprintf('%s%s/%s/%s_summary.RData',path2data,m,folder_date[m],m))
for(bar in foo){
assign(paste0(bar,'_',m),get(bar))
}
}
## load provider detailed
for(m in measures){
foo = load(sprintf('%s%s/%s/dfProvider.RData',path2data,m,folder_date[m]))
assign(paste0("df_provider",'_',m),get(foo))
}
## load original imaging files and patients data to extract imaging dates
for(m in measures){
foo = load(sprintf('%s%s/%s/dataFromtsv.RData',path2data,m,folder_date[m],m))
for(bar in foo){
if(str_sub(bar, end = 3) == "img") assign(paste0(bar,'_',m),get(bar))
rm(list = bar)
}
}
for(m in measures){
foo = load(sprintf('%s%s/%s/dfPatients.RData',path2data,m,folder_date[m]))
assign(paste0("df_patients",'_',m),get(foo))
}
measureNames = c('Low Back Pain','Syncope','Acute Sinusitis','Uncomplicated Headache')
names(measureNames) = measures
# dfMeasures = bind_rows(lapply(measures,function(m) {
#   tmp = get(paste0('provider_summary_',m))[[key]]
#   if(is.null(tmp)) tmp = data.frame(Year = numeric(0), Num = numeric(0),
#                                      Den = numeric(0), Rate = numeric(0))
#   tmp %>% mutate(Measure = measureNames[m])
# }))
# provider summary with all years, all measures
prov_meas = bind_rows(lapply(measures, function(m) {
tmp = get(paste0("provider_summary_", m))[[key]]
if(is.null(tmp)) tmp = data.frame(Year = 2014:2017, Num = 0, Den = 0, Rate = 0)
# in case the some years has no records
tmp = tmp %>% right_join(data.frame(Year = 2014:2017), by = "Year") %>%
replace_na(list(Num = 0, Den = 0, Rate = 0))
return(tmp %>% mutate(Measure = measureNames[m]))
})) %>% mutate(Measure = factor(Measure, levels = measureNames))
sys_meas = bind_rows(lapply(measures, function(m) {
tmp = get(paste0("system_summary_", m))[[1]]
return(tmp %>% mutate(Measure = measureNames[m]))
})) %>% mutate(Measure = factor(Measure, levels = measureNames))
# create a data.frame from all years, all measures, all providers
spec_meas = bind_rows(lapply(measures, function(m) {
provider_summary = get(paste0("provider_summary_", m))
dat_m = bind_rows(lapply(names(provider_summary), function(key) {
return(provider_summary[[key]] %>% mutate(PROVIDER_KEY = key))
}))
return(dat_m %>% mutate(Measure = measureNames[m]))
})) %>% mutate(Measure = factor(Measure, levels = measureNames))
if(str_trim(info$SPECIALTY_DESC) != "") {
# data frame within the same specialty as the provider
# when specialty is an empty string, use all providers instead
spec_meas = spec_meas %>%
inner_join(provider_info, by = c("PROVIDER_KEY" = "PROVIDER_ORDER_MD_KEY")) %>%
filter(SPECIALTY_DESC == info$SPECIALTY_DESC)
}
path2toml = '/Users/Carl/MPrOVE/toml/' # path to toml files here
toml_BackPain = parseTOML(paste0(path2toml, "BackPain.toml"))
levels = (prov_meas %>% filter(Year == 2017) %>% arrange(Den))$Measure
mainplot = function(year) {
dfYear = prov_meas %>% filter(Year == year) %>%
mutate(Measure = factor(Measure, levels = levels))
## Want a legend like this
#dfTemp = dfYear %>% mutate(Numerator=Num) %>% gather(Bar,Count,Numerator,Den)
#p =  dfTemp %>%
#  ggplot(aes(x=Measure,y=Count,group=Measure,fill=Bar)) + geom_col() + scale_fill_manual('Count',values=c('darkblue','goldenrod'),labels=c('Eligible','Imaged'))
#p
# But want only a single set of labels and unstacked bars
p =  ggplot(dfYear,aes(x=Measure,y=Den,group=Measure,fill=Bar)) +
geom_col(fill='darkblue') + geom_col(aes(y=Num),fill='goldenrod')
p + ylab('# Patients') + theme(axis.text.x=element_text(angle=0)) +
xlab('') + ggtitle('Rates of Inappropriate Imaging.') +
geom_label(aes(label=sprintf('%3.1f%% (%i)',Rate,Num)),fill='goldenrod')
}
summaryTable = function(year) {
dat.tmp = spec_meas %>% filter(Year == year & Den >= elig_thres)
summary_by_meas = prov_meas %>% filter(Year == year) %>%
mutate(Rank = NA, Total = NA, Percentile = NA) %>%
select(Measure, Num, Den, Rate, Rank, Total, Percentile)
for(i in 1:nrow(summary_by_meas)) {
tmp = dat.tmp %>% filter(Measure == summary_by_meas$Measure[i])
rank = which(tmp$PROVIDER_KEY[order(tmp$Rate, decreasing = TRUE)] == key)
total = nrow(tmp)
summary_by_meas$Rank[i] = ifelse(length(rank) == 0, "N/A", rank)
summary_by_meas$Total[i] = total
summary_by_meas$Percentile[i] = ifelse(length(rank) == 0,
"N/A", sprintf("%d%% (%d/%d)", round(rank/total * 100), rank, total))
}
ref = spec_meas %>% group_by(Measure, Year) %>% summarise(Num = sum(Num), Den = sum(Den)) %>%
filter(Year == year) %>% mutate(Rate = paste0(round(Num / Den * 100, digits = 1), "%")) %>%
rename("Specialty Rate" = Rate) %>% select(-Num, -Den, -Year) %>%
inner_join(filter(sys_meas, Year == year) %>% select(Measure, Rate), by = "Measure") %>%
mutate(Rate = paste0(round(Rate, digits = 1), "%")) %>% rename("System Rate" = Rate)
summary_by_meas = summary_by_meas %>%
rename("Inappropriate Imaging" = Num, "Eligible Patients" = Den) %>%
mutate(Rate = paste0(round(Rate, digits = 1), "%")) %>%
select(-Rank, -Total) %>% rename("Provider Rate" = Rate) %>%
inner_join(ref, by = "Measure")
datatable(summary_by_meas[c(1:4, 6:7, 5)], rownames = FALSE,
options = list(dom = 't', columnDefs = list(list(className = 'dt-right', targets = 0:6))))
}
mainplot(2017)
summaryTable(2017)
mainplot(2016)
summaryTable(2016)
mainplot(2015)
summaryTable(2015)
mainplot(2014)
summaryTable(2014)
addCI = function(df) {
bind_cols(df, rateCI(df))
}
gg.dat = bind_rows(prov_meas %>% mutate(Trend = "Provider") %>% addCI,
sys_meas %>% mutate(Trend = "System") %>% addCI)
if(str_trim(info$SPECIALTY_DESC) != "") {
# when specialty is empty, omit specialty trend
gg.dat = bind_rows(gg.dat, spec_meas %>% group_by(Measure, Year) %>%
summarise(Num = sum(Num), Den = sum(Den)) %>%
mutate(Trend = paste("Specialty:", info$SPECIALTY_DESC),
Rate = Num / Den * 100) %>% addCI)
}
trends_by_meas = function(measure) {
p = gg.dat %>% filter(Measure == measure) %>%
ggplot(aes(x = Year, y = Rate, color = Trend, fill = Trend)) +
geom_line() + geom_ribbon(aes(ymin = Lower, ymax = Upper), size = 0, alpha = 0.25) +
geom_point(aes(text = paste0("Numerator: ", Num, "<br>", "Denominator: ", Den))) +
ylab('Rate per 100 eligible patients') + ggtitle("Annual rates of inappropriate imaging") +
theme(legend.title = element_blank())
ggplotly(p)
}
trends_by_meas(measureNames[1])
trends_by_meas(measureNames[2])
trends_by_meas(measureNames[3])
trends_by_meas(measureNames[4])
providerBox = function(year) {
dat.tmp = spec_meas %>% filter(Year == year & Den >= elig_thres) %>%
rename(measure = Measure, rate = Rate)
# get the provider's rates as reference
provider_ref = prov_meas %>% filter(Year == year) %>%
mutate(Rank = NA, Total = NA, Percentile = NA) %>%
select(Measure, Rate, Rank, Total, Percentile)
for(i in 1:nrow(provider_ref)) {
tmp = dat.tmp %>% filter(measure == provider_ref$Measure[i])
rank = which(tmp$PROVIDER_KEY[order(tmp$rate, decreasing = TRUE)] == key)
total = nrow(tmp)
provider_ref$Rank[i] = ifelse(length(rank) == 0, "N/A", rank)
provider_ref$Total[i] = total
provider_ref$Percentile[i] = ifelse(length(rank) == 0,
"N/A", sprintf("%d%% (%d/%d)", round(rank/total * 100), rank, total))
}
p = ggplot(dat.tmp, aes(x = measure, y = rate, color = measure)) +
geom_boxplot(alpha = 0.5) + ylab("Rate per 100 eligible patients") + xlab("Measure") +
ggtitle(paste("Provider rates in specialty:", info$SPECIALTY_DESC, ",", year)) +
theme(legend.position = "none") +
geom_point(data = provider_ref, color = "goldenrod", size = 3,
aes(x = Measure, y = Rate, label = Percentile))
ggplotly(p, tooltip = c("Measure", "Rate", "Percentile"))
# p
}
providerScat = function(measure, year = 2017) {
dat.tmp = filter(spec_meas, Den >= elig_thres & Year == year & Measure == measure)
index = which(dat.tmp$PROVIDER_KEY == key)
# reference lines
Sys.rate = filter(sys_meas, Year == year, Measure == measure)$Rate
Spec.rate = filter(gg.dat, Trend == "Specialty", Year == year, Measure == measure)$Rate
p = dat.tmp %>% ggplot(aes(y=Rate,x=Num)) + geom_point(col="brown2",alpha=0.5) +
geom_point(data = dat.tmp[index, ] %>% rename(num = Num, rate = Rate),
aes(y=rate, x=num), col="goldenrod", size=3)
if(str_trim(info$SPECIALTY_DESC) != "") {
p = p +  geom_hline(aes(yintercept = Sys.rate, color = "System Rate"), linetype = "dashed") +
geom_hline(aes(yintercept = Spec.rate, color = "Specialty Rate"), linetype = "dashed") +
scale_color_manual(values = c("System Rate" = "dodgerblue2",
"Specialty Rate" = "mediumseagreen"))
}
else {
p = p +  geom_hline(aes(yintercept = Sys.rate, color = "System Rate"), linetype = "dashed") +
scale_color_manual(values = c("System Rate" = "dodgerblue2"))
}
p = p + xlab('# of patients imaged') + ylab('Rate per 100 eligible patients') +
ggtitle(paste('Inappropriate imaging for specialty:', info$SPECIALTY_DESC, ",", year)) +
theme(legend.title = element_blank())
ggplotly(p, tooltip = c("Num", "Rate", "Sys.rate", "Spec.rate"))
}
gen_scatter = function(year) {
tabs = lapply(measureNames, function(measure) {
sprintf("\n#### %s\n```{r scatter-%d-%s, results = 'asis'}\nproviderScat('%s', year = %d)\n```",
measure, year, measure, measure, year)
})
paste0(unlist(tabs))
}
providerBox(2017)
providerBox(2016)
providerBox(2015)
providerBox(2014)
patient_dt = function(year) {
# get summary table across all measures for a specific provider
dat.tmp = bind_rows(lapply(measures, function(m) {
tmp = get(paste0("df_provider_", m))[[key]]
if(is.null(tmp))
tmp = data.frame(episode = numeric(0), Num = numeric(0), Den = numeric(0),
DOS = character(0), PATIENT_KEY = character(0))
tmp %>% mutate(Measure = measureNames[m])
}))
dat.tmp = filter(dat.tmp, year(DOS) == year & Num == 1) %>%
select(DOS, PATIENT_KEY, Measure) %>%
mutate(Name = "Anonymous", MRN = "x1234567890x") %>%
arrange(desc(DOS))
# output table, including imaging dates and imaging description
# extract information from dfPatients and img20xx
if(nrow(dat.tmp) == 0) {
dat.out = dat.tmp %>%
mutate("Imaging Date" = character(0), "Diagnosis Description" = character(0)) %>%
rename("Diagnosis Date" = DOS) %>% select(-PATIENT_KEY)
}
else {
dat.out = bind_rows(lapply(1:nrow(dat.tmp), function(i) {
m = measures[measureNames == dat.tmp$Measure[i]]
pat_key = dat.tmp$PATIENT_KEY[i]
# determine which episode is this record in
eps = (get(paste0("df_patients_", m))[[pat_key]] %>% filter(DOS == dat.tmp$DOS[i]))$episode[1]
eps_pat = get(paste0("df_patients_", m))[[pat_key]] %>% filter(episode == eps)
# imaging records about this patient
img_pat = bind_rows(lapply(unique(year(eps_pat$DOS)), function(y) {
get(paste0("img", y, "_", m)) %>% filter(PATIENT_KEY == pat_key) %>%
mutate(DOS = dmy(DOS))
}))
# filter imaging that occured during this episode
img_pat = img_pat %>% filter(DOS %in% eps_pat$DOS & DX_CD == eps_pat$DX_CD[1]) %>%
mutate(DOS = sprintf("%s %s, %s", month(DOS, label = TRUE, abbr = FALSE),
day(DOS), year(DOS))) %>%
select(PATIENT_KEY, DOS, PX_SHORT_DESC) %>% rename("Imaging Date" = DOS)
dat.tmp[i, ] %>% right_join(img_pat, by = "PATIENT_KEY") %>%
mutate(DOS = sprintf("%s %s, %s", month(DOS, label = TRUE, abbr = FALSE),
day(DOS), year(DOS))) %>%
rename("Diagnosis Date" = DOS, "Diagnosis Description" = PX_SHORT_DESC) %>% select(-PATIENT_KEY)
}))
}
col.order = c(1, 5, 3, 4, 2, 6)
datatable(dat.out[col.order], class = 'cell-border stripe',
options = list(pageLength = 25), filter = "bottom", rownames = FALSE)
}
patient_dt(2017)
patient_dt(2016)
patient_dt(2015)
patient_dt(2014)
